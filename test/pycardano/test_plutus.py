from dataclasses import dataclass
from test.pycardano.util import check_two_way_cbor
from typing import Union

from pycardano.plutus import (
    COST_MODELS,
    ExecutionUnits,
    PlutusData,
    Redeemer,
    RedeemerTag,
)


@dataclass
class MyTest(PlutusData):
    CONSTR_ID = 130

    a: int
    b: bytes


@dataclass
class BigTest(PlutusData):
    CONSTR_ID = 8

    test: MyTest


@dataclass
class LargestTest(PlutusData):
    CONSTR_ID = 9


@dataclass
class VestingParam(PlutusData):
    CONSTR_ID = 1

    beneficiary: bytes
    deadline: int
    testa: Union[BigTest, LargestTest]
    testb: Union[BigTest, LargestTest]


@dataclass
class MyRedeemer(Redeemer):
    data: MyTest


def test_plutus_data():
    """Ground truth of this test is generated by test/resources/haskell/PlutusData. See its README for more details."""
    key_hash = bytes.fromhex("c2ff616e11299d9094ce0a7eb5b7284b705147a822f4ffbd471f971a")
    deadline = 1643235300000
    testa = BigTest(MyTest(123, b"1234"))
    testb = LargestTest()

    my_vesting = VestingParam(
        beneficiary=key_hash, deadline=deadline, testa=testa, testb=testb
    )
    assert (
        "d87a9f581cc2ff616e11299d9094ce0a7eb5b7284b705147a822f4ffbd471f971a1b0000017e9"
        "874d2a0d905019fd8668218829f187b4431323334ffffd9050280ff"
        == my_vesting.to_cbor()
    )
    check_two_way_cbor(my_vesting)


def test_redeemer():
    data = MyTest(123, b"234")
    redeemer = MyRedeemer(RedeemerTag.SPEND, 0, data, ExecutionUnits(1000000, 1000000))
    assert (
        "840000d8668218829f187b43323334ff821a000f42401a000f4240" == redeemer.to_cbor()
    )
    check_two_way_cbor(redeemer)


def test_cost_model():
    assert (
        "a141005901d59f1a000302590001011a00060bc719026d00011a000249f01903e800011"
        "a000249f018201a0025cea81971f70419744d186419744d186419744d186419744d1864"
        "19744d186419744d18641864186419744d18641a000249f018201a000249f018201a000"
        "249f018201a000249f01903e800011a000249f018201a000249f01903e800081a000242"
        "201a00067e2318760001011a000249f01903e800081a000249f01a0001b79818f7011a0"
        "00249f0192710011a0002155e19052e011903e81a000249f01903e8011a000249f01820"
        "1a000249f018201a000249f0182001011a000249f0011a000249f0041a000194af18f80"
        "11a000194af18f8011a0002377c190556011a0002bdea1901f1011a000249f018201a00"
        "0249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000"
        "242201a00067e23187600010119f04c192bd200011a000249f018201a000242201a0006"
        "7e2318760001011a000242201a00067e2318760001011a0025cea81971f704001a00014"
        "1bb041a000249f019138800011a000249f018201a000302590001011a000249f018201a"
        "000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a0"
        "00249f018201a00330da70101ff" == COST_MODELS.to_cbor()
    )
